//
//  LocalhostStyleKit.swift
//
//  Created on Jan 11, 2020.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class LocalhostStyleKit: NSObject {
    
    
    //MARK: - Colors
    
    static let secondaryPurple = UIColor(hue: 0.651, saturation: 0.658, brightness: 0.78, alpha: 1)
    static let primaryPurple = UIColor(hue: 0.653, saturation: 0.66, brightness: 0.588, alpha: 1)
    static let turquoise = UIColor(hue: 0.492, saturation: 0.791, brightness: 0.827, alpha: 1)
    
    //MARK: - Canvas Drawings
    
    /// Components
    
    class func drawIsNotHosting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)
        
        /// target
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 16, y: 0))
            shape.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 7.18, y: 0), controlPoint2: CGPoint(x: 0, y: 7.18))
            shape.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 0, y: 24.82), controlPoint2: CGPoint(x: 7.18, y: 32))
            shape.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 24.82, y: 32), controlPoint2: CGPoint(x: 32, y: 24.82))
            shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 32, y: 7.18), controlPoint2: CGPoint(x: 24.82, y: 0))
            shape.close()
            shape.move(to: CGPoint(x: 16, y: 29.41))
            shape.addCurve(to: CGPoint(x: 2.59, y: 16), controlPoint1: CGPoint(x: 8.61, y: 29.41), controlPoint2: CGPoint(x: 2.59, y: 23.39))
            shape.addCurve(to: CGPoint(x: 16, y: 2.59), controlPoint1: CGPoint(x: 2.59, y: 8.61), controlPoint2: CGPoint(x: 8.61, y: 2.59))
            shape.addCurve(to: CGPoint(x: 29.41, y: 16), controlPoint1: CGPoint(x: 23.39, y: 2.59), controlPoint2: CGPoint(x: 29.41, y: 8.61))
            shape.addCurve(to: CGPoint(x: 16, y: 29.41), controlPoint1: CGPoint(x: 29.41, y: 23.39), controlPoint2: CGPoint(x: 23.39, y: 29.41))
            shape.close()
            context.saveGState()
            UIColor(white: 0.59, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 9.74, y: 0))
            shape2.addCurve(to: CGPoint(x: 0, y: 9.74), controlPoint1: CGPoint(x: 4.37, y: 0), controlPoint2: CGPoint(x: 0, y: 4.37))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 19.48), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 4.37, y: 19.48))
            shape2.addCurve(to: CGPoint(x: 19.48, y: 9.74), controlPoint1: CGPoint(x: 15.11, y: 19.48), controlPoint2: CGPoint(x: 19.48, y: 15.11))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 0), controlPoint1: CGPoint(x: 19.48, y: 4.37), controlPoint2: CGPoint(x: 15.11, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 9.74, y: 16.91))
            shape2.addCurve(to: CGPoint(x: 2.56, y: 9.74), controlPoint1: CGPoint(x: 5.78, y: 16.91), controlPoint2: CGPoint(x: 2.56, y: 13.7))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 2.56), controlPoint1: CGPoint(x: 2.56, y: 5.78), controlPoint2: CGPoint(x: 5.78, y: 2.56))
            shape2.addCurve(to: CGPoint(x: 16.92, y: 9.74), controlPoint1: CGPoint(x: 13.7, y: 2.56), controlPoint2: CGPoint(x: 16.92, y: 5.78))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 16.91), controlPoint1: CGPoint(x: 16.92, y: 13.7), controlPoint2: CGPoint(x: 13.7, y: 16.91))
            shape2.close()
            context.saveGState()
            context.translateBy(x: 6.26, y: 6.26)
            UIColor(white: 0.59, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 3.83, y: 7.65))
            oval.addCurve(to: CGPoint(x: 7.65, y: 3.83), controlPoint1: CGPoint(x: 5.94, y: 7.65), controlPoint2: CGPoint(x: 7.65, y: 5.94))
            oval.addCurve(to: CGPoint(x: 3.83, y: 0), controlPoint1: CGPoint(x: 7.65, y: 1.71), controlPoint2: CGPoint(x: 5.94, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 3.83), controlPoint1: CGPoint(x: 1.71, y: 0), controlPoint2: CGPoint(x: 0, y: 1.71))
            oval.addCurve(to: CGPoint(x: 3.83, y: 7.65), controlPoint1: CGPoint(x: 0, y: 5.94), controlPoint2: CGPoint(x: 1.71, y: 7.65))
            oval.close()
            context.saveGState()
            context.translateBy(x: 11.83, y: 11.83)
            UIColor(white: 0.59, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 1.05, y: 0))
        rectangle.addLine(to: CGPoint(x: 39.55, y: 0))
        rectangle.addCurve(to: CGPoint(x: 40.6, y: 1.05), controlPoint1: CGPoint(x: 40.13, y: 0), controlPoint2: CGPoint(x: 40.6, y: 0.47))
        rectangle.addCurve(to: CGPoint(x: 39.55, y: 2.1), controlPoint1: CGPoint(x: 40.6, y: 1.63), controlPoint2: CGPoint(x: 40.13, y: 2.1))
        rectangle.addLine(to: CGPoint(x: 1.05, y: 2.1))
        rectangle.addCurve(to: CGPoint(x: 0, y: 1.05), controlPoint1: CGPoint(x: 0.47, y: 2.1), controlPoint2: CGPoint(x: 0, y: 1.63))
        rectangle.addCurve(to: CGPoint(x: 1.05, y: 0), controlPoint1: CGPoint(x: 0, y: 0.47), controlPoint2: CGPoint(x: 0.47, y: 0))
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 17.5, y: 17.85)
        context.rotate(by: 315 * CGFloat.pi/180)
        context.translateBy(x: -20.3, y: -1.05)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.588, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawIsHosting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)
        
        /// target
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 16, y: 0))
            shape.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 7.18, y: 0), controlPoint2: CGPoint(x: 0, y: 7.18))
            shape.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 0, y: 24.82), controlPoint2: CGPoint(x: 7.18, y: 32))
            shape.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 24.82, y: 32), controlPoint2: CGPoint(x: 32, y: 24.82))
            shape.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 32, y: 7.18), controlPoint2: CGPoint(x: 24.82, y: 0))
            shape.close()
            shape.move(to: CGPoint(x: 16, y: 29.41))
            shape.addCurve(to: CGPoint(x: 2.59, y: 16), controlPoint1: CGPoint(x: 8.61, y: 29.41), controlPoint2: CGPoint(x: 2.59, y: 23.39))
            shape.addCurve(to: CGPoint(x: 16, y: 2.59), controlPoint1: CGPoint(x: 2.59, y: 8.61), controlPoint2: CGPoint(x: 8.61, y: 2.59))
            shape.addCurve(to: CGPoint(x: 29.41, y: 16), controlPoint1: CGPoint(x: 23.39, y: 2.59), controlPoint2: CGPoint(x: 29.41, y: 8.61))
            shape.addCurve(to: CGPoint(x: 16, y: 29.41), controlPoint1: CGPoint(x: 29.41, y: 23.39), controlPoint2: CGPoint(x: 23.39, y: 29.41))
            shape.close()
            context.saveGState()
            UIColor(hue: 0.492, saturation: 0.791, brightness: 0.827, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 9.74, y: 0))
            shape2.addCurve(to: CGPoint(x: 0, y: 9.74), controlPoint1: CGPoint(x: 4.37, y: 0), controlPoint2: CGPoint(x: 0, y: 4.37))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 19.48), controlPoint1: CGPoint(x: 0, y: 15.11), controlPoint2: CGPoint(x: 4.37, y: 19.48))
            shape2.addCurve(to: CGPoint(x: 19.48, y: 9.74), controlPoint1: CGPoint(x: 15.11, y: 19.48), controlPoint2: CGPoint(x: 19.48, y: 15.11))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 0), controlPoint1: CGPoint(x: 19.48, y: 4.37), controlPoint2: CGPoint(x: 15.11, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 9.74, y: 16.91))
            shape2.addCurve(to: CGPoint(x: 2.56, y: 9.74), controlPoint1: CGPoint(x: 5.78, y: 16.91), controlPoint2: CGPoint(x: 2.56, y: 13.7))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 2.56), controlPoint1: CGPoint(x: 2.56, y: 5.78), controlPoint2: CGPoint(x: 5.78, y: 2.56))
            shape2.addCurve(to: CGPoint(x: 16.92, y: 9.74), controlPoint1: CGPoint(x: 13.7, y: 2.56), controlPoint2: CGPoint(x: 16.92, y: 5.78))
            shape2.addCurve(to: CGPoint(x: 9.74, y: 16.91), controlPoint1: CGPoint(x: 16.92, y: 13.7), controlPoint2: CGPoint(x: 13.7, y: 16.91))
            shape2.close()
            context.saveGState()
            context.translateBy(x: 6.26, y: 6.26)
            UIColor(hue: 0.492, saturation: 0.791, brightness: 0.827, alpha: 1).setFill()
            shape2.fill()
            context.restoreGState()
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 3.83, y: 7.65))
            oval.addCurve(to: CGPoint(x: 7.65, y: 3.83), controlPoint1: CGPoint(x: 5.94, y: 7.65), controlPoint2: CGPoint(x: 7.65, y: 5.94))
            oval.addCurve(to: CGPoint(x: 3.83, y: 0), controlPoint1: CGPoint(x: 7.65, y: 1.71), controlPoint2: CGPoint(x: 5.94, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 3.83), controlPoint1: CGPoint(x: 1.71, y: 0), controlPoint2: CGPoint(x: 0, y: 1.71))
            oval.addCurve(to: CGPoint(x: 3.83, y: 7.65), controlPoint1: CGPoint(x: 0, y: 5.94), controlPoint2: CGPoint(x: 1.71, y: 7.65))
            oval.close()
            context.saveGState()
            context.translateBy(x: 11.83, y: 11.83)
            UIColor(hue: 0.492, saturation: 0.791, brightness: 0.827, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTarget(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        /// target
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 23, y: 0))
            shape.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 10.32, y: 0), controlPoint2: CGPoint(x: 0, y: 10.32))
            shape.addCurve(to: CGPoint(x: 23, y: 46), controlPoint1: CGPoint(x: 0, y: 35.68), controlPoint2: CGPoint(x: 10.32, y: 46))
            shape.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 35.68, y: 46), controlPoint2: CGPoint(x: 46, y: 35.68))
            shape.addCurve(to: CGPoint(x: 23, y: 0), controlPoint1: CGPoint(x: 46, y: 10.32), controlPoint2: CGPoint(x: 35.68, y: 0))
            shape.close()
            shape.move(to: CGPoint(x: 23, y: 42.27))
            shape.addCurve(to: CGPoint(x: 3.73, y: 23), controlPoint1: CGPoint(x: 12.37, y: 42.27), controlPoint2: CGPoint(x: 3.73, y: 33.63))
            shape.addCurve(to: CGPoint(x: 23, y: 3.73), controlPoint1: CGPoint(x: 3.73, y: 12.37), controlPoint2: CGPoint(x: 12.37, y: 3.73))
            shape.addCurve(to: CGPoint(x: 42.27, y: 23), controlPoint1: CGPoint(x: 33.63, y: 3.73), controlPoint2: CGPoint(x: 42.27, y: 12.37))
            shape.addCurve(to: CGPoint(x: 23, y: 42.27), controlPoint1: CGPoint(x: 42.27, y: 33.63), controlPoint2: CGPoint(x: 33.63, y: 42.27))
            shape.close()
            context.saveGState()
            UIColor.white.setFill()
            shape.fill()
            context.restoreGState()
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 14, y: 0))
            shape2.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.28, y: 0), controlPoint2: CGPoint(x: 0, y: 6.28))
            shape2.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 0, y: 21.72), controlPoint2: CGPoint(x: 6.28, y: 28))
            shape2.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.72, y: 28), controlPoint2: CGPoint(x: 28, y: 21.72))
            shape2.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 28, y: 6.28), controlPoint2: CGPoint(x: 21.72, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 14, y: 24.31))
            shape2.addCurve(to: CGPoint(x: 3.68, y: 14), controlPoint1: CGPoint(x: 8.31, y: 24.31), controlPoint2: CGPoint(x: 3.68, y: 19.69))
            shape2.addCurve(to: CGPoint(x: 14, y: 3.68), controlPoint1: CGPoint(x: 3.68, y: 8.31), controlPoint2: CGPoint(x: 8.31, y: 3.68))
            shape2.addCurve(to: CGPoint(x: 24.32, y: 14), controlPoint1: CGPoint(x: 19.69, y: 3.68), controlPoint2: CGPoint(x: 24.32, y: 8.31))
            shape2.addCurve(to: CGPoint(x: 14, y: 24.31), controlPoint1: CGPoint(x: 24.32, y: 19.69), controlPoint2: CGPoint(x: 19.69, y: 24.31))
            shape2.close()
            context.saveGState()
            context.translateBy(x: 9, y: 9)
            UIColor.white.setFill()
            shape2.fill()
            context.restoreGState()
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 5.5, y: 11))
            oval.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 8.54, y: 11), controlPoint2: CGPoint(x: 11, y: 8.54))
            oval.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 11, y: 2.46), controlPoint2: CGPoint(x: 8.54, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 2.46, y: 0), controlPoint2: CGPoint(x: 0, y: 2.46))
            oval.addCurve(to: CGPoint(x: 5.5, y: 11), controlPoint1: CGPoint(x: 0, y: 8.54), controlPoint2: CGPoint(x: 2.46, y: 11))
            oval.close()
            context.saveGState()
            context.translateBy(x: 17, y: 17)
            UIColor.white.setFill()
            oval.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawYourCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        /// people
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 6)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 7, y: 0))
            shape.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.14, y: 0), controlPoint2: CGPoint(x: 0, y: 3.59))
            shape.addCurve(to: CGPoint(x: 7, y: 16), controlPoint1: CGPoint(x: 0, y: 12.41), controlPoint2: CGPoint(x: 3.14, y: 16))
            shape.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 10.86, y: 16), controlPoint2: CGPoint(x: 14, y: 12.41))
            shape.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 14, y: 3.59), controlPoint2: CGPoint(x: 10.86, y: 0))
            shape.close()
            shape.move(to: CGPoint(x: 7, y: 12.44))
            shape.addCurve(to: CGPoint(x: 3.11, y: 8), controlPoint1: CGPoint(x: 4.86, y: 12.44), controlPoint2: CGPoint(x: 3.11, y: 10.45))
            shape.addCurve(to: CGPoint(x: 7, y: 3.56), controlPoint1: CGPoint(x: 3.11, y: 5.55), controlPoint2: CGPoint(x: 4.86, y: 3.56))
            shape.addCurve(to: CGPoint(x: 10.89, y: 8), controlPoint1: CGPoint(x: 9.14, y: 3.56), controlPoint2: CGPoint(x: 10.89, y: 5.55))
            shape.addCurve(to: CGPoint(x: 7, y: 12.44), controlPoint1: CGPoint(x: 10.89, y: 10.45), controlPoint2: CGPoint(x: 9.14, y: 12.44))
            shape.close()
            context.saveGState()
            context.translateBy(x: 18, y: 6)
            UIColor.white.setFill()
            shape.fill()
            context.restoreGState()
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 10.5, y: 0))
            path.addCurve(to: CGPoint(x: 0, y: 11.65), controlPoint1: CGPoint(x: 4.71, y: 0), controlPoint2: CGPoint(x: 0, y: 5.23))
            path.addLine(to: CGPoint(x: 0, y: 14.26))
            path.addCurve(to: CGPoint(x: 1.57, y: 16), controlPoint1: CGPoint(x: 0, y: 15.22), controlPoint2: CGPoint(x: 0.7, y: 16))
            path.addCurve(to: CGPoint(x: 3.13, y: 14.26), controlPoint1: CGPoint(x: 2.43, y: 16), controlPoint2: CGPoint(x: 3.13, y: 15.22))
            path.addLine(to: CGPoint(x: 3.13, y: 11.65))
            path.addCurve(to: CGPoint(x: 10.5, y: 3.48), controlPoint1: CGPoint(x: 3.13, y: 7.14), controlPoint2: CGPoint(x: 6.44, y: 3.48))
            path.addCurve(to: CGPoint(x: 17.87, y: 11.65), controlPoint1: CGPoint(x: 14.56, y: 3.48), controlPoint2: CGPoint(x: 17.87, y: 7.15))
            path.addLine(to: CGPoint(x: 17.87, y: 14.26))
            path.addCurve(to: CGPoint(x: 19.43, y: 16), controlPoint1: CGPoint(x: 17.87, y: 15.22), controlPoint2: CGPoint(x: 18.57, y: 16))
            path.addCurve(to: CGPoint(x: 21, y: 14.26), controlPoint1: CGPoint(x: 20.3, y: 16), controlPoint2: CGPoint(x: 21, y: 15.22))
            path.addLine(to: CGPoint(x: 21, y: 11.65))
            path.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 21, y: 5.23), controlPoint2: CGPoint(x: 16.29, y: 0))
            path.close()
            context.saveGState()
            context.translateBy(x: 15, y: 18)
            UIColor.white.setFill()
            path.fill()
            context.restoreGState()
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 7, y: 0))
            shape2.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.14, y: 0), controlPoint2: CGPoint(x: 0, y: 3.59))
            shape2.addCurve(to: CGPoint(x: 7, y: 16), controlPoint1: CGPoint(x: 0, y: 12.41), controlPoint2: CGPoint(x: 3.14, y: 16))
            shape2.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 10.86, y: 16), controlPoint2: CGPoint(x: 14, y: 12.41))
            shape2.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 14, y: 3.59), controlPoint2: CGPoint(x: 10.86, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 7, y: 12.44))
            shape2.addCurve(to: CGPoint(x: 3.11, y: 8), controlPoint1: CGPoint(x: 4.86, y: 12.44), controlPoint2: CGPoint(x: 3.11, y: 10.45))
            shape2.addCurve(to: CGPoint(x: 7, y: 3.56), controlPoint1: CGPoint(x: 3.11, y: 5.55), controlPoint2: CGPoint(x: 4.86, y: 3.56))
            shape2.addCurve(to: CGPoint(x: 10.89, y: 8), controlPoint1: CGPoint(x: 9.14, y: 3.56), controlPoint2: CGPoint(x: 10.89, y: 5.55))
            shape2.addCurve(to: CGPoint(x: 7, y: 12.44), controlPoint1: CGPoint(x: 10.89, y: 10.45), controlPoint2: CGPoint(x: 9.14, y: 12.44))
            shape2.close()
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor.white.setFill()
            shape2.fill()
            context.restoreGState()
            
            /// Path
            let path2 = UIBezierPath()
            path2.move(to: CGPoint(x: 10.37, y: 0))
            path2.addCurve(to: CGPoint(x: 0.05, y: 8.78), controlPoint1: CGPoint(x: 5.5, y: 0), controlPoint2: CGPoint(x: 1.26, y: 3.61))
            path2.addCurve(to: CGPoint(x: 1.19, y: 10.9), controlPoint1: CGPoint(x: -0.17, y: 9.71), controlPoint2: CGPoint(x: 0.34, y: 10.66))
            path2.addCurve(to: CGPoint(x: 3.12, y: 9.65), controlPoint1: CGPoint(x: 2.04, y: 11.14), controlPoint2: CGPoint(x: 2.91, y: 10.58))
            path2.addCurve(to: CGPoint(x: 10.37, y: 3.48), controlPoint1: CGPoint(x: 3.98, y: 6.02), controlPoint2: CGPoint(x: 6.95, y: 3.48))
            path2.addCurve(to: CGPoint(x: 17.83, y: 11.65), controlPoint1: CGPoint(x: 14.48, y: 3.48), controlPoint2: CGPoint(x: 17.83, y: 7.15))
            path2.addLine(to: CGPoint(x: 17.83, y: 14.26))
            path2.addCurve(to: CGPoint(x: 19.41, y: 16), controlPoint1: CGPoint(x: 17.83, y: 15.22), controlPoint2: CGPoint(x: 18.54, y: 16))
            path2.addCurve(to: CGPoint(x: 21, y: 14.26), controlPoint1: CGPoint(x: 20.29, y: 16), controlPoint2: CGPoint(x: 21, y: 15.22))
            path2.addLine(to: CGPoint(x: 21, y: 11.65))
            path2.addCurve(to: CGPoint(x: 10.37, y: 0), controlPoint1: CGPoint(x: 21, y: 5.23), controlPoint2: CGPoint(x: 16.23, y: 0))
            path2.close()
            context.saveGState()
            context.translateBy(x: 29, y: 12)
            UIColor.white.setFill()
            path2.fill()
            context.restoreGState()
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 7, y: 0))
            shape3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.14, y: 0), controlPoint2: CGPoint(x: 0, y: 3.59))
            shape3.addCurve(to: CGPoint(x: 7, y: 16), controlPoint1: CGPoint(x: 0, y: 12.41), controlPoint2: CGPoint(x: 3.14, y: 16))
            shape3.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 10.86, y: 16), controlPoint2: CGPoint(x: 14, y: 12.41))
            shape3.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 14, y: 3.59), controlPoint2: CGPoint(x: 10.86, y: 0))
            shape3.close()
            shape3.move(to: CGPoint(x: 7, y: 12.44))
            shape3.addCurve(to: CGPoint(x: 3.11, y: 8), controlPoint1: CGPoint(x: 4.86, y: 12.44), controlPoint2: CGPoint(x: 3.11, y: 10.45))
            shape3.addCurve(to: CGPoint(x: 7, y: 3.56), controlPoint1: CGPoint(x: 3.11, y: 5.55), controlPoint2: CGPoint(x: 4.86, y: 3.56))
            shape3.addCurve(to: CGPoint(x: 10.89, y: 8), controlPoint1: CGPoint(x: 9.14, y: 3.56), controlPoint2: CGPoint(x: 10.89, y: 5.55))
            shape3.addCurve(to: CGPoint(x: 7, y: 12.44), controlPoint1: CGPoint(x: 10.89, y: 10.45), controlPoint2: CGPoint(x: 9.14, y: 12.44))
            shape3.close()
            context.saveGState()
            context.translateBy(x: 4, y: 0)
            UIColor.white.setFill()
            shape3.fill()
            context.restoreGState()
            
            /// Path
            let path3 = UIBezierPath()
            path3.move(to: CGPoint(x: 20.95, y: 8.73))
            path3.addCurve(to: CGPoint(x: 10.66, y: 0), controlPoint1: CGPoint(x: 19.74, y: 3.59), controlPoint2: CGPoint(x: 15.51, y: 0))
            path3.addCurve(to: CGPoint(x: 0, y: 11.65), controlPoint1: CGPoint(x: 4.78, y: 0), controlPoint2: CGPoint(x: 0, y: 5.23))
            path3.addLine(to: CGPoint(x: 0, y: 14.26))
            path3.addCurve(to: CGPoint(x: 1.59, y: 16), controlPoint1: CGPoint(x: 0, y: 15.22), controlPoint2: CGPoint(x: 0.71, y: 16))
            path3.addCurve(to: CGPoint(x: 3.18, y: 14.26), controlPoint1: CGPoint(x: 2.47, y: 16), controlPoint2: CGPoint(x: 3.18, y: 15.22))
            path3.addLine(to: CGPoint(x: 3.18, y: 11.65))
            path3.addCurve(to: CGPoint(x: 10.66, y: 3.48), controlPoint1: CGPoint(x: 3.18, y: 7.15), controlPoint2: CGPoint(x: 6.54, y: 3.48))
            path3.addCurve(to: CGPoint(x: 17.87, y: 9.59), controlPoint1: CGPoint(x: 14.06, y: 3.48), controlPoint2: CGPoint(x: 17.02, y: 5.99))
            path3.addCurve(to: CGPoint(x: 19.8, y: 10.84), controlPoint1: CGPoint(x: 18.09, y: 10.52), controlPoint2: CGPoint(x: 18.95, y: 11.08))
            path3.addCurve(to: CGPoint(x: 20.95, y: 8.73), controlPoint1: CGPoint(x: 20.66, y: 10.61), controlPoint2: CGPoint(x: 21.17, y: 9.66))
            path3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 12)
            UIColor.white.setFill()
            path3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWoman(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 280), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 280), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 280)
        
        /// woman
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 0)
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 27.5, y: 56))
            path.addCurve(to: CGPoint(x: 55, y: 28), controlPoint1: CGPoint(x: 42.69, y: 56), controlPoint2: CGPoint(x: 55, y: 43.47))
            path.addCurve(to: CGPoint(x: 27.5, y: 0), controlPoint1: CGPoint(x: 55, y: 12.53), controlPoint2: CGPoint(x: 42.69, y: 0))
            path.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 12.31, y: 0), controlPoint2: CGPoint(x: 0, y: 12.53))
            path.addCurve(to: CGPoint(x: 27.5, y: 56), controlPoint1: CGPoint(x: 0, y: 43.47), controlPoint2: CGPoint(x: 12.31, y: 56))
            path.close()
            context.saveGState()
            context.translateBy(x: 35, y: 0)
            UIColor.white.setFill()
            path.fill()
            context.restoreGState()
            
            /// Path
            let path2 = UIBezierPath()
            path2.move(to: CGPoint(x: 89.65, y: 19.18))
            path2.addCurve(to: CGPoint(x: 63.33, y: 0), controlPoint1: CGPoint(x: 85.9, y: 7.7), controlPoint2: CGPoint(x: 75.28, y: 0))
            path2.addLine(to: CGPoint(x: 61.74, y: 0))
            path2.addCurve(to: CGPoint(x: 35.42, y: 19.18), controlPoint1: CGPoint(x: 49.79, y: 0), controlPoint2: CGPoint(x: 39.17, y: 7.7))
            path2.addLine(to: CGPoint(x: 0, y: 126))
            path2.addLine(to: CGPoint(x: 41.67, y: 126))
            path2.addLine(to: CGPoint(x: 41.67, y: 210))
            path2.addLine(to: CGPoint(x: 83.33, y: 210))
            path2.addLine(to: CGPoint(x: 83.33, y: 126))
            path2.addLine(to: CGPoint(x: 125, y: 126))
            path2.addLine(to: CGPoint(x: 89.65, y: 19.18))
            path2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 70)
            UIColor.white.setFill()
            path2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawMan(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 280), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 280), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 280)
        
        /// man
        do {
            context.saveGState()
            context.translateBy(x: 31, y: 0)
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 28, y: 56))
            path.addCurve(to: CGPoint(x: 56, y: 28), controlPoint1: CGPoint(x: 43.47, y: 56), controlPoint2: CGPoint(x: 56, y: 43.47))
            path.addCurve(to: CGPoint(x: 28, y: 0), controlPoint1: CGPoint(x: 56, y: 12.53), controlPoint2: CGPoint(x: 43.47, y: 0))
            path.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 12.53, y: 0), controlPoint2: CGPoint(x: 0, y: 12.53))
            path.addCurve(to: CGPoint(x: 28, y: 56), controlPoint1: CGPoint(x: 0, y: 43.47), controlPoint2: CGPoint(x: 12.53, y: 56))
            path.close()
            context.saveGState()
            context.translateBy(x: 21, y: 0)
            UIColor.white.setFill()
            path.fill()
            context.restoreGState()
            
            /// Path
            let path2 = UIBezierPath()
            path2.move(to: CGPoint(x: 70, y: 0))
            path2.addLine(to: CGPoint(x: 28, y: 0))
            path2.addCurve(to: CGPoint(x: 0, y: 27.87), controlPoint1: CGPoint(x: 12.6, y: 0), controlPoint2: CGPoint(x: 0, y: 12.54))
            path2.addLine(to: CGPoint(x: 0, y: 104.5))
            path2.addLine(to: CGPoint(x: 21, y: 104.5))
            path2.addLine(to: CGPoint(x: 21, y: 209))
            path2.addLine(to: CGPoint(x: 77, y: 209))
            path2.addLine(to: CGPoint(x: 77, y: 104.5))
            path2.addLine(to: CGPoint(x: 98, y: 104.5))
            path2.addLine(to: CGPoint(x: 98, y: 27.87))
            path2.addCurve(to: CGPoint(x: 70, y: 0), controlPoint1: CGPoint(x: 98, y: 12.54), controlPoint2: CGPoint(x: 85.4, y: 0))
            path2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 70)
            UIColor.white.setFill()
            path2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)
        
        /// avatar
        do {
            context.saveGState()
            context.translateBy(x: 25, y: 25)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -23, y: -25)
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 11.81, y: 26))
            shape.addCurve(to: CGPoint(x: 11.99, y: 26), controlPoint1: CGPoint(x: 11.87, y: 26), controlPoint2: CGPoint(x: 11.93, y: 26))
            shape.addCurve(to: CGPoint(x: 12.06, y: 26), controlPoint1: CGPoint(x: 12.02, y: 26), controlPoint2: CGPoint(x: 12.04, y: 26))
            shape.addCurve(to: CGPoint(x: 12.18, y: 26), controlPoint1: CGPoint(x: 12.1, y: 26), controlPoint2: CGPoint(x: 12.14, y: 26))
            shape.addCurve(to: CGPoint(x: 20.29, y: 22.95), controlPoint1: CGPoint(x: 15.55, y: 25.95), controlPoint2: CGPoint(x: 18.28, y: 24.92))
            shape.addCurve(to: CGPoint(x: 23.91, y: 10.47), controlPoint1: CGPoint(x: 24.72, y: 18.62), controlPoint2: CGPoint(x: 23.99, y: 11.18))
            shape.addCurve(to: CGPoint(x: 18.32, y: 1.41), controlPoint1: CGPoint(x: 23.62, y: 5.15), controlPoint2: CGPoint(x: 20.72, y: 2.6))
            shape.addCurve(to: CGPoint(x: 12.13, y: 0), controlPoint1: CGPoint(x: 16.54, y: 0.52), controlPoint2: CGPoint(x: 14.46, y: 0.04))
            shape.addLine(to: CGPoint(x: 12.05, y: 0))
            shape.addCurve(to: CGPoint(x: 12.01, y: 0), controlPoint1: CGPoint(x: 12.04, y: 0), controlPoint2: CGPoint(x: 12.02, y: 0))
            shape.addLine(to: CGPoint(x: 11.94, y: 0))
            shape.addCurve(to: CGPoint(x: 5.74, y: 1.37), controlPoint1: CGPoint(x: 10.66, y: 0), controlPoint2: CGPoint(x: 8.15, y: 0.18))
            shape.addCurve(to: CGPoint(x: 0.09, y: 10.47), controlPoint1: CGPoint(x: 3.33, y: 2.56), controlPoint2: CGPoint(x: 0.38, y: 5.11))
            shape.addCurve(to: CGPoint(x: 3.71, y: 22.95), controlPoint1: CGPoint(x: 0.01, y: 11.18), controlPoint2: CGPoint(x: -0.72, y: 18.62))
            shape.addCurve(to: CGPoint(x: 11.81, y: 26), controlPoint1: CGPoint(x: 5.71, y: 24.92), controlPoint2: CGPoint(x: 8.44, y: 25.95))
            shape.close()
            shape.move(to: CGPoint(x: 3.17, y: 10.72))
            shape.addCurve(to: CGPoint(x: 3.18, y: 10.64), controlPoint1: CGPoint(x: 3.17, y: 10.69), controlPoint2: CGPoint(x: 3.18, y: 10.66))
            shape.addCurve(to: CGPoint(x: 11.93, y: 2.71), controlPoint1: CGPoint(x: 3.56, y: 3.48), controlPoint2: CGPoint(x: 9.42, y: 2.71))
            shape.addLine(to: CGPoint(x: 11.97, y: 2.71))
            shape.addCurve(to: CGPoint(x: 12.06, y: 2.71), controlPoint1: CGPoint(x: 11.99, y: 2.71), controlPoint2: CGPoint(x: 12.03, y: 2.71))
            shape.addCurve(to: CGPoint(x: 20.81, y: 10.64), controlPoint1: CGPoint(x: 15.17, y: 2.77), controlPoint2: CGPoint(x: 20.45, y: 3.87))
            shape.addCurve(to: CGPoint(x: 20.82, y: 10.72), controlPoint1: CGPoint(x: 20.81, y: 10.67), controlPoint2: CGPoint(x: 20.81, y: 10.7))
            shape.addCurve(to: CGPoint(x: 17.98, y: 21.16), controlPoint1: CGPoint(x: 20.83, y: 10.79), controlPoint2: CGPoint(x: 21.64, y: 17.59))
            shape.addCurve(to: CGPoint(x: 12.05, y: 23.3), controlPoint1: CGPoint(x: 16.53, y: 22.58), controlPoint2: CGPoint(x: 14.6, y: 23.28))
            shape.addCurve(to: CGPoint(x: 11.99, y: 23.3), controlPoint1: CGPoint(x: 12.03, y: 23.3), controlPoint2: CGPoint(x: 12.02, y: 23.3))
            shape.addLine(to: CGPoint(x: 11.99, y: 23.3))
            shape.addCurve(to: CGPoint(x: 11.94, y: 23.3), controlPoint1: CGPoint(x: 11.97, y: 23.3), controlPoint2: CGPoint(x: 11.96, y: 23.3))
            shape.addCurve(to: CGPoint(x: 6.02, y: 21.16), controlPoint1: CGPoint(x: 9.4, y: 23.28), controlPoint2: CGPoint(x: 7.46, y: 22.58))
            shape.addCurve(to: CGPoint(x: 3.17, y: 10.72), controlPoint1: CGPoint(x: 2.37, y: 17.61), controlPoint2: CGPoint(x: 3.16, y: 10.78))
            shape.close()
            context.saveGState()
            context.translateBy(x: 10, y: 0)
            UIColor.white.setFill()
            shape.fill()
            context.restoreGState()
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 46, y: 13.34))
            path.addCurve(to: CGPoint(x: 46, y: 13.31), controlPoint1: CGPoint(x: 46, y: 13.33), controlPoint2: CGPoint(x: 46, y: 13.32))
            path.addCurve(to: CGPoint(x: 45.99, y: 13.04), controlPoint1: CGPoint(x: 46, y: 13.23), controlPoint2: CGPoint(x: 45.99, y: 13.14))
            path.addCurve(to: CGPoint(x: 40.91, y: 4.36), controlPoint1: CGPoint(x: 45.92, y: 10.92), controlPoint2: CGPoint(x: 45.77, y: 5.95))
            path.addCurve(to: CGPoint(x: 40.8, y: 4.33), controlPoint1: CGPoint(x: 40.88, y: 4.35), controlPoint2: CGPoint(x: 40.83, y: 4.34))
            path.addCurve(to: CGPoint(x: 31.51, y: 0.27), controlPoint1: CGPoint(x: 35.75, y: 3.1), controlPoint2: CGPoint(x: 31.55, y: 0.31))
            path.addCurve(to: CGPoint(x: 29.4, y: 0.63), controlPoint1: CGPoint(x: 30.82, y: -0.19), controlPoint2: CGPoint(x: 29.88, y: -0.03))
            path.addCurve(to: CGPoint(x: 29.77, y: 2.65), controlPoint1: CGPoint(x: 28.92, y: 1.28), controlPoint2: CGPoint(x: 29.09, y: 2.18))
            path.addCurve(to: CGPoint(x: 39.99, y: 7.12), controlPoint1: CGPoint(x: 29.96, y: 2.77), controlPoint2: CGPoint(x: 34.42, y: 5.75))
            path.addCurve(to: CGPoint(x: 42.97, y: 13.13), controlPoint1: CGPoint(x: 42.6, y: 8.01), controlPoint2: CGPoint(x: 42.89, y: 10.68))
            path.addCurve(to: CGPoint(x: 42.98, y: 13.4), controlPoint1: CGPoint(x: 42.97, y: 13.23), controlPoint2: CGPoint(x: 42.97, y: 13.31))
            path.addCurve(to: CGPoint(x: 42.75, y: 16.71), controlPoint1: CGPoint(x: 43, y: 14.36), controlPoint2: CGPoint(x: 42.93, y: 15.86))
            path.addCurve(to: CGPoint(x: 23.01, y: 21.11), controlPoint1: CGPoint(x: 40.93, y: 17.7), controlPoint2: CGPoint(x: 33.82, y: 21.11))
            path.addCurve(to: CGPoint(x: 3.25, y: 16.7), controlPoint1: CGPoint(x: 12.23, y: 21.11), controlPoint2: CGPoint(x: 5.08, y: 17.69))
            path.addCurve(to: CGPoint(x: 3.02, y: 13.39), controlPoint1: CGPoint(x: 3.07, y: 15.84), controlPoint2: CGPoint(x: 2.99, y: 14.35))
            path.addCurve(to: CGPoint(x: 3.03, y: 13.12), controlPoint1: CGPoint(x: 3.02, y: 13.3), controlPoint2: CGPoint(x: 3.03, y: 13.22))
            path.addCurve(to: CGPoint(x: 6.01, y: 7.11), controlPoint1: CGPoint(x: 3.11, y: 10.67), controlPoint2: CGPoint(x: 3.4, y: 8))
            path.addCurve(to: CGPoint(x: 16.23, y: 2.64), controlPoint1: CGPoint(x: 11.58, y: 5.74), controlPoint2: CGPoint(x: 16.04, y: 2.75))
            path.addCurve(to: CGPoint(x: 16.6, y: 0.62), controlPoint1: CGPoint(x: 16.91, y: 2.17), controlPoint2: CGPoint(x: 17.08, y: 1.27))
            path.addCurve(to: CGPoint(x: 14.49, y: 0.26), controlPoint1: CGPoint(x: 16.12, y: -0.04), controlPoint2: CGPoint(x: 15.18, y: -0.2))
            path.addCurve(to: CGPoint(x: 5.2, y: 4.32), controlPoint1: CGPoint(x: 14.45, y: 0.3), controlPoint2: CGPoint(x: 10.27, y: 3.09))
            path.addCurve(to: CGPoint(x: 5.09, y: 4.35), controlPoint1: CGPoint(x: 5.15, y: 4.33), controlPoint2: CGPoint(x: 5.12, y: 4.34))
            path.addCurve(to: CGPoint(x: 0.01, y: 13.03), controlPoint1: CGPoint(x: 0.23, y: 5.95), controlPoint2: CGPoint(x: 0.08, y: 10.92))
            path.addCurve(to: CGPoint(x: 0, y: 13.3), controlPoint1: CGPoint(x: 0.01, y: 13.13), controlPoint2: CGPoint(x: 0.01, y: 13.22))
            path.addCurve(to: CGPoint(x: 0, y: 13.33), controlPoint1: CGPoint(x: 0, y: 13.31), controlPoint2: CGPoint(x: 0, y: 13.32))
            path.addCurve(to: CGPoint(x: 0.57, y: 18.19), controlPoint1: CGPoint(x: -0.01, y: 13.89), controlPoint2: CGPoint(x: -0.02, y: 16.76))
            path.addCurve(to: CGPoint(x: 1.16, y: 18.87), controlPoint1: CGPoint(x: 0.69, y: 18.47), controlPoint2: CGPoint(x: 0.89, y: 18.71))
            path.addCurve(to: CGPoint(x: 23.02, y: 24), controlPoint1: CGPoint(x: 1.49, y: 19.09), controlPoint2: CGPoint(x: 9.54, y: 24))
            path.addCurve(to: CGPoint(x: 44.88, y: 18.87), controlPoint1: CGPoint(x: 36.49, y: 24), controlPoint2: CGPoint(x: 44.54, y: 19.07))
            path.addCurve(to: CGPoint(x: 45.46, y: 18.19), controlPoint1: CGPoint(x: 45.13, y: 18.71), controlPoint2: CGPoint(x: 45.35, y: 18.47))
            path.addCurve(to: CGPoint(x: 46, y: 13.34), controlPoint1: CGPoint(x: 46.02, y: 16.77), controlPoint2: CGPoint(x: 46.01, y: 13.9))
            path.close()
            context.saveGState()
            context.translateBy(x: 0, y: 26)
            UIColor.white.setFill()
            path.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Components
    
    class func imageOfIsNotHosting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        LocalhostStyleKit.drawIsNotHosting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIsHosting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        LocalhostStyleKit.drawIsHosting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTarget() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
        LocalhostStyleKit.drawTarget()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfYourCircle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
        LocalhostStyleKit.drawYourCircle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWoman() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 280), false, 0)
        LocalhostStyleKit.drawWoman()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMan() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 280), false, 0)
        LocalhostStyleKit.drawMan()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
        LocalhostStyleKit.drawProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
